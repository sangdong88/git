# vs code virtual 환경 setting
>pip3 install virtualenv
>virtualenv 경로디렉터리
>맥 source 디렉터리명_venv/bin/activate
>Win 디렉터리명_venv/bin/activate

### Django command ###

Step #1 Project & App 생성

1-1 django-admin startproject 프로젝트명 / 프로젝트 생성
1-2 >>> 프로젝트 디렉터리로 이동 후
1-3 django-admin startapp 앱명 / 앱 생성
1-4 앱 생성 후에 앱 안에 Templates폴더를 따로 생성 해준다. django의 기본 구조인 MVT Model, View, Template
django에서 사용하는 template 엔진이 각 앱의 Templates를 기본적으로 바라보고 있기 때문에 바로 사용 가능하다.
1-5 프로젝트 settings.py에서 INSTALLED_APPS에 생성한 앱을 추가해준다. 추가해줘야 그앱의 기능을 불러올 수 있음.
? 프로젝트 vs 앱 ?
커뮤니티가 1개의 프로젝트고, 그 안에 여러가지 앱 들이 포함 되어있다.
앱은 프로젝트의 어떤 기능을 분리 해서 관리 하게 된다.

# autopep8 정적 분석도구 파이썬 코드를 시작하지 않아도 미리 작성 가이드를 주는 프로그램.

Step #2 fc_user앱의 Model 만들기

2-1 class Fcuser(models.Model) models.Model 상속받은 Fcuser 클래스 생성
2-2 각 필드 들의 객체 지정 {username, password, registered_dttm}
2-3 class Fcuser안에 class Meta 클래스를 사용하여 db_table 명 지정, settings.py 설치된 앱들과 구분하기 위해 지정하여 사용
2-4 터미널에서 manage.py 파일이 있는 경로로 이동
2-5 > python manage.py makemigrations  /  model.py 에 있는 내용 대로 migrations 폴더에 model 설정을 가진 initial.py 파일이 생성 된다.
2-6 > python manage.py migrate  /  settings에 INSTALLED_APPS들이 사용하는 테이블을 자동으로 갖는 db.sqlite3 생성 - [변경 내용 db에 반영]
> sqlite3 .\db.sqlite3  /  db 파일 실행
> sqlite> .tables  /  table 항목 표기
> sqlite> .schema fastcampus_fcuser
    CREATE TABLE IF NOT EXISTS "fastcampus_fcuser" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(64) NOT NULL, "registered_dttm" datetime NOT NULL, "username" varchar(32) NOT NULL);
    id 자동생성, password 64자리, registered_dttm datetime, username 32자리
    # model.py 에 field 내용이 바뀔 때 마다 makemigrations해주면 0002 auto 파일 생성 [변경된 내용] 되고, migrate 해주어 db에 반영한다.schema

Step #3 Django admin [admin page 세팅]

3-1 > D:\coding\python\all\ch3\fc_community> python .\manage.py runserver / 서버 실행
3-2 > D:\coding\python\all\ch3\fc_community> python .\manage.py creatsuperuser / super계정 생성
3-3 fc_user/admin 안에서
> from django.contrib import admin
> from .models import Fcuser / models.py 안에 Fcuser 클래스 import
> class FcuserAdmin(admin.ModelAdmin):
>     list_display = ('username', 'password') / fc_user 앱안에서 내용을 어떻게 표기 할 것을 선정. username paswword 
>admin.site.register(Fcuser, FcuserAdmin) / django.contrib.admin.site에서 register 함수 호출 admin 화면에서 fc_user라는 앱 등록, 앱안에 fc_user모델이 표기
3-4 fc_user/models.py안에서 class Meta: 클래스안에
> verbose_name_plural = '패스트캠퍼스 사용자' / 추가 하여 fc_user라는 앱이름을 패스트캠퍼스 사용자로 변경
# 기본적으로 복수 s가 붙기 때문에 이를 삭제하기 위해 verbose_name_plural을 사용.
3-5 fc_user/models.py 에서 
> def __str__(self) / __str__내장 함수는 클래스가 문자열로 변환 될때 어떻게 변환할지 정하는 함수
>    return self.username / 클래스 변환된 이름을 username으로 받겠다.
3-6 id = models.AutoField(primary_key=True) 추가

Step #4 Django Templates 

4-1 fc_user/templates/register.html 생성 
4-2 크게 <html> 안에 <head>와 <body> 2개 카테고리로 구성.
4-3 <head>작성 https://getbootstrap.com/docs/5.0/getting-started/introduction/ 에서 <head>에 들어갈 내용으로, 
    CSS copy, JS-Bundle copy, JS-seperate copy, Starter template에서 Meta tag copy한다. 기본적인 부트스트랩 사용 준비 끝
4-4 <body> https://getbootstrap.com/docs/5.0/forms/overview/ overview form copy
4-5 <form method="POST" action="."> form 전달 방식에는 POST와 GET이 있다.
    POST : 페이지 안의 '등록' 버튼을 입력 받았을 때
    GET  : 해당 URL에 접속 했을 때
    action="." 는 현재 페이지에서 수행
4-6 form 전달 시(회원가입) 다른 사이트에서 불법 도용을 막기 위한 토큰을 사용
    - {% csrf_token %}
4-7     <div class="mb-3">
          <label for="username" class="form-label"
            >사용자 이름</label
          >
          <input
            type="text"   // type은 text email 등등
            class="form-control"
            id="username"
            placeholder="사용자 이름"
            name="username"  // name 이 있어야 서버에서 key로 사용 할 수 있음.
          />
4-8   <div class="row mt-5">
        <div class="col-12">
          {{ error }}
          <!-- error 발생시 views의 문구 삽입되는 곳 -->
        </div>
      </div>

Step #5 Django View 

5-1 fc_user/views.py 안에서 register함수 작성.
> def register(request):
>   return render(request, 'register.html') # template 폴더를 기본적으로 바라보고 있다.
    request 변수가 들어오면 render 함수가 return되어 template안에 register.html를 호출
    [render함수는 template를 불러오는 함수]
5-2 Project/urls.py 안에서 
> from django.urls import path, include 추가
> path('fc_user/', include('fc_user.urls'))를 추가 해준다. 사이트주소/fc_user 아래로 오는 모든 url들은 fc_user.urls에서 관리 하겠다는 코드를 추가해준다.
5-3 fc_user/urls.py 안에서 
> from . import views 추가, 현재 경로의 views 를 import
> path('register/', views.register) 추가, 사이트주소/fc_user/register 경로를 views.register 함수와 연결
    다시 말해, 사이트주소/fc_user/register 경로로 들어오면 views.register 함수 실행
5-4 from .models import Fcuser // Models에 Fcuser 클래스 사용
    from django.contrib.auth.hashers import make_password // 비밀번호 암호화
        fc_user = Fcuser (
            username=username,
            useremail=useremail,
            password=make_password // 비밀번호 암호화
        fc_user.save() // 저장
        // Fcuser 클래스 안에 변수들에서 선언된 변수들을 fc_user에 튜플로 저장.
5-5 
    if request.method=='GET':
        return render(request, 'register.html')
    elif request.method=='POST' :
        username = request.POST.get('username', None)
        useremail = request.POST.get('useremail', None)
        password = request.POST.get('password', None)
        re_password = request.POST.get('re-password', None)
        # get 함수로 입력 값이 없으면 None 출력
        #입력 값이 없을 때의 에러처리

        res_data = {}
        if not (username and password and re_password and useremail): # 하나라도 None 거짓이 들어오면 if 문실행
            res_data['error'] = '모든 값을 입력해야 합니다.'
        if password != re_password:
            # return HttpResponse('비밀번호가 다릅니다.') # 이렇게 되면 새로운 페이지에서 메시지 출력됨 불편
            res_data['error'] = '비밀번호가 다릅니다.'
        # resister.html 에 기능 추가 {{ error }}
        return render(request, 'register.html', res_data)


# 만일 Models feild 에 useremail을 추가 하려고 한다면,
1. <Model> Modles.py 에서     useremail = models.EmailField(max_length=128,
                                  verbose_name='사용자 이메일')
 # Default='' 기본 값지정 가능 ,# email은 Charfield가 아닌 Emailfield 사용
2. python manage.py makemigrations으로 변경된 내용 업데이트
2-1. 이 때 새롭게 추가된 필드 내용을 기존 항목에서 어떻게 표시 할 것인지 물어봄. Models에서 Defualt 값을 줄 수 도 있고 명령창에서 줄 수도 있음.
3. python manage.py migrate 로 db 파일 업데이트
4. <Template> register.html에서 새로 추가된 useremail내용을 <body>에 추가
5. <View> useremail내용을 추가된
6. admin의 list_display 에서 'useremail' 추가



### Static ###
Frontend code 들을 static 폴더에 넣고 그걸 사용하기 위해서 register.html link
CDN service [Contents Delivery Network] 컨텐츠 배달 네트워크는 사용자에게 웹 콘텐츠를 효율적으로 제공할 수 있는 서버의 분산 네트워크입니다.
CDN은 최종 사용자와 가까운 POP(Point-of-Point)위치의 Edge 서버에 캐시된 콘텐츠를 저장하여 대기시간을 최소화합니다.
1. 프로젝트 폴더안에 static 폴더를 만든다.
2. static 폴더를 연결해주기 위해서 settings.py 에서 설정해준다.
3. 맨 아래 # 내가 static 파일에 접근햇을 때 그게 어느 폴더에 있는지 알려주기위해
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
] # BASE_DIR은 프로젝트 경로이기 때문에 그안에 static 폴더다
4. bootswatch 에서 theme 다운로드 후 static 폴더로 복사
5.  <link rel="stylesheet" href="/static/bootstrap.min.css"/> 경로를 static 폴더에서 사용












