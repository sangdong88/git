# vs code virtual 환경 setting
>pip3 install virtualenv
>virtualenv 경로디렉터리
>맥 source 디렉터리명_venv/bin/activate
>Win 디렉터리명_venv/bin/activate

### Django command ###

Step #1 Project & App 생성

1-1 django-admin startproject 프로젝트명 / 프로젝트 생성
1-2 >>> 프로젝트 디렉터리로 이동 후
1-3 django-admin startapp 앱명 / 앱 생성
1-4 앱 생성 후에 앱 안에 Templates폴더를 따로 생성 해준다. django의 기본 구조인 MVT Model, View, Template
django에서 사용하는 template 엔진이 각 앱의 Templates를 기본적으로 바라보고 있기 때문에 바로 사용 가능하다.
1-5 프로젝트 settings.py에서 INSTALLED_APPS에 생성한 앱을 추가해준다. 추가해줘야 그앱의 기능을 불러올 수 있음.
? 프로젝트 vs 앱 ?
커뮤니티가 1개의 프로젝트고, 그 안에 여러가지 앱 들이 포함 되어있다.
앱은 프로젝트의 어떤 기능을 분리 해서 관리 하게 된다.

# autopep8 정적 분석도구 파이썬 코드를 시작하지 않아도 미리 작성 가이드를 주는 프로그램.

Step #2 fc_user앱의 Model 만들기

2-1 class Fcuser(models.Model) models.Model 상속받은 Fcuser 클래스 생성
2-2 각 필드 들의 객체 지정 {username, password, registered_dttm}
2-3 class Fcuser안에 class Meta 클래스를 사용하여 db_table 명 지정, settings.py 설치된 앱들과 구분하기 위해 지정하여 사용
2-4 터미널에서 manage.py 파일이 있는 경로로 이동
2-5 > python manage.py makemigrations  /  model.py 에 있는 내용 대로 migrations 폴더에 model 설정을 가진 initial.py 파일이 생성 된다.
2-6 > python manage.py migrate  /  settings에 INSTALLED_APPS들이 사용하는 테이블을 자동으로 갖는 db.sqlite3 생성 - [변경 내용 db에 반영]
> sqlite3 .\db.sqlite3  /  db 파일 실행
> sqlite> .tables  /  table 항목 표기
> sqlite> .schema fastcampus_fcuser
    CREATE TABLE IF NOT EXISTS "fastcampus_fcuser" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(64) NOT NULL, "registered_dttm" datetime NOT NULL, "username" varchar(32) NOT NULL);
    id 자동생성, password 64자리, registered_dttm datetime, username 32자리
    # model.py 에 field 내용이 바뀔 때 마다 makemigrations해주면 0002 auto 파일 생성 [변경된 내용] 되고, migrate 해주어 db에 반영한다.schema

Step #3 Django admin [admin page 세팅]

3-1 > D:\coding\python\all\ch3\fc_community> python .\manage.py runserver / 서버 실행
3-2 > D:\coding\python\all\ch3\fc_community> python .\manage.py creatsuperuser / super계정 생성
3-3 fc_user/admin 안에서
> from django.contrib import admin
> from .models import Fcuser / models.py 안에 Fcuser 클래스 import
> class FcuserAdmin(admin.ModelAdmin):
>     list_display = ('username', 'password') / fc_user 앱안에서 내용을 어떻게 표기 할 것을 선정. username paswword 
>admin.site.register(Fcuser, FcuserAdmin) / django.contrib.admin.site에서 register 함수 호출 admin 화면에서 fc_user라는 앱 등록, 앱안에 fc_user모델이 표기
3-4 fc_user/models.py안에서 class Meta: 클래스안에
> verbose_name_plural = '패스트캠퍼스 사용자' / 추가 하여 fc_user라는 앱이름을 패스트캠퍼스 사용자로 변경
# 기본적으로 복수 s가 붙기 때문에 이를 삭제하기 위해 verbose_name_plural을 사용.
3-5 fc_user/models.py 에서 
> def __str__(self) / __str__내장 함수는 클래스가 문자열로 변환 될때 어떻게 변환할지 정하는 함수
>    return self.username / 클래스 변환된 이름을 username으로 받겠다.
3-6 id = models.AutoField(primary_key=True) 추가

Step #4 Django Templates 

4-1 fc_user/templates/register.html 생성 
4-2 크게 <html> 안에 <head>와 <body> 2개 카테고리로 구성.
4-3 <head>작성 https://getbootstrap.com/docs/5.0/getting-started/introduction/ 에서 <head>에 들어갈 내용으로, 
    CSS copy, JS-Bundle copy, JS-seperate copy, Starter template에서 Meta tag copy한다. 기본적인 부트스트랩 사용 준비 끝
4-4 <body> https://getbootstrap.com/docs/5.0/forms/overview/ overview form copy
4-5 <form method="POST" action="."> form 전달 방식에는 POST와 GET이 있다.
    POST : 페이지 안의 '등록' 버튼을 입력 받았을 때
    GET  : 해당 URL에 접속 했을 때
    action="." 는 현재 페이지에서 수행
4-6 form 전달 시(회원가입) 다른 사이트에서 불법 도용을 막기 위한 토큰을 사용
    - {% csrf_token %}
4-7     <div class="mb-3">
          <label for="username" class="form-label"
            >사용자 이름</label
          >
          <input
            type="text"   // type은 text email 등등
            class="form-control"
            id="username"
            placeholder="사용자 이름"
            name="username"  // name 이 있어야 서버에서 key로 사용 할 수 있음.
          />
4-8   <div class="row mt-5">
        <div class="col-12">
          {{ error }}
          <!-- error 발생시 views의 문구 삽입되는 곳 -->
        </div>
      </div>

Step #5 Django View 

5-1 fc_user/views.py 안에서 register함수 작성.
> def register(request):
>   return render(request, 'register.html') # template 폴더를 기본적으로 바라보고 있다.
    request 변수가 들어오면 render 함수가 return되어 template안에 register.html를 호출
    [render함수는 template를 불러오는 함수]
5-2 Project/urls.py 안에서 
> from django.urls import path, include 추가
> path('fc_user/', include('fc_user.urls'))를 추가 해준다. 사이트주소/fc_user 아래로 오는 모든 url들은 fc_user.urls에서 관리 하겠다는 코드를 추가해준다.
5-3 fc_user/urls.py 안에서 
> from . import views 추가, 현재 경로의 views 를 import
> path('register/', views.register) 추가, 사이트주소/fc_user/register 경로를 views.register 함수와 연결
    다시 말해, 사이트주소/fc_user/register 경로로 들어오면 views.register 함수 실행
5-4 from .models import Fcuser // Models에 Fcuser 클래스 사용
    from django.contrib.auth.hashers import make_password // 비밀번호 암호화
        fc_user = Fcuser (
            username=username,
            useremail=useremail,
            password=make_password(password) // 비밀번호 암호화
        fc_user.save() // 저장
        // Fcuser 클래스 안에 변수들에서 선언된 변수들을 fc_user에 튜플로 저장.
5-5 
    if request.method=='GET':
        return render(request, 'register.html')
    elif request.method=='POST' :
        username = request.POST.get('username', None)
        useremail = request.POST.get('useremail', None)
        password = request.POST.get('password', None)
        re_password = request.POST.get('re-password', None)
        # get 함수로 입력 값이 없으면 None 출력
        #입력 값이 없을 때의 에러처리

        res_data = {}
        if not (username and password and re_password and useremail): # 하나라도 None 거짓이 들어오면 if 문실행
            res_data['error'] = '모든 값을 입력해야 합니다.'
        if password != re_password:
            # return HttpResponse('비밀번호가 다릅니다.') # 이렇게 되면 새로운 페이지에서 메시지 출력됨 불편
            res_data['error'] = '비밀번호가 다릅니다.'
        # resister.html 에 기능 추가 {{ error }}
        return render(request, 'register.html', res_data)


# 만일 Models feild 에 useremail을 추가 하려고 한다면,
1. <Model> Modles.py 에서     useremail = models.EmailField(max_length=128,
                                  verbose_name='사용자 이메일')
 # Default='' 기본 값지정 가능 ,# email은 Charfield가 아닌 Emailfield 사용
2. python manage.py makemigrations으로 변경된 내용 업데이트
2-1. 이 때 새롭게 추가된 필드 내용을 기존 항목에서 어떻게 표시 할 것인지 물어봄. Models에서 Defualt 값을 줄 수 도 있고 명령창에서 줄 수도 있음.
3. python manage.py migrate 로 db 파일 업데이트
4. <Template> register.html에서 새로 추가된 useremail내용을 <body>에 추가
5. <View> useremail내용을 추가된
6. admin의 list_display 에서 'useremail' 추가



### Static ###
Frontend code 들을 static 폴더에 넣고 그걸 사용하기 위해서 register.html link
CDN service [Contents Delivery Network] 컨텐츠 배달 네트워크는 사용자에게 웹 콘텐츠를 효율적으로 제공할 수 있는 서버의 분산 네트워크입니다.
CDN은 최종 사용자와 가까운 POP(Point-of-Point)위치의 Edge 서버에 캐시된 콘텐츠를 저장하여 대기시간을 최소화합니다.
1. 프로젝트 폴더안에 static 폴더를 만든다.
2. static 폴더를 연결해주기 위해서 settings.py 에서 설정해준다.
3. 맨 아래 # 내가 static 파일에 접근햇을 때 그게 어느 폴더에 있는지 알려주기위해
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
] # BASE_DIR은 프로젝트 경로이기 때문에 그안에 static 폴더다
4. bootswatch 에서 theme 다운로드 후 static 폴더로 복사
5.  <link rel="stylesheet" href="/static/bootstrap.min.css"/> 경로를 static 폴더에서 사용



# 쿠키와 세션
https://doooyeon.github.io/2018/09/10/cookie-and-session.html

로그인 기능을 위하여 session을 사용한다.
HTTP 통신은 비연결통신 지향 즉, 통신을 계속 연결하고 있지 않는다. 그래서 트래픽이 가볍다
client의 request가 server에 전달 되고 response 되면 HTTP 통신은 끝이 난다. 어떠한 정보도 저장하고 있지 않는다.
그래서 로그인 시 session을 사용하는 것.
session이란 ?
일정 시간 동안 같은 브라우저로부터 들어오는 요청을 하나의 상태로 보고 그 상태를 유지하는 기술이다.
즉, 웹 브라우저를 통해 서버에 접속한 이후부터 브라우저를 종료할 때까지 유지되는 상태이다.

웹브라우저가 서버에 요청
서버가 해당 웹브라우저(클라이언트)에 유일한 ID(Session ID)를 부여함
서버가 응답할 때 HTTP 헤더(Set-Cookie)에 Session ID를 포함해서 전송
쿠키에 Session ID를 JSESSIONID 라는 이름으로 저장
 Set−Cookie: JSESSIONID=xslei13f
웹브라우저는 이후 웹브라우저를 닫기까지 다음 요청 때 부여된 Session ID가 담겨있는 쿠키를 HTTP 헤더에 넣어서 전송
 Cookie: JSESSIONID=xslei13f
서버는 세션 ID를 확인하고, 해당 세션에 관련된 정보를 확인한 후 응답
세션도 쿠키를 사용하여 값을 주고받으며 클라이언트의 상태 정보를 유지한다.
즉, 상태 정보를 유지하는 수단은 쿠키 이다.


### 로그인 기능 (session) ###
- Model 은 있으니 Template과 view를 수정 해준다.
우선 Tempalte 먼저 작업 해주면, 기존의 register의 html을 복사. <body>에서 로그인에 필요한 username과 password 부분만 사용.

<View> views.py 에서 
def login(request):  # 함수 생성
    return render(request, 'login.html') # return으로 render 를 login.html 연결

그 다음은 request를 어디서 받을 것인지 지정 해줘야 한다. 어디서 ? urls.py에서
path('login/', views.login),   // 홈페이지에서 login/ 아래의 주소로 들어오는 요청에 대해서 views의 login 함수 사용
그 말은 login 함수에서 request는 [login/ 아래의 주소]가 되고 login.html의 render가 return 된다.
즉, views와 urls은 한 링크라고 보면 될 것 같다. 항상 같이 생각하는 연습을 하자

RDBMS의 Table에서 가장 먼저 고려하는, 개별 행을 검색하는 데 사용할 수있는 고유 한 키(Primary Key)에 대해 정리할 생각입니다. 
기본키(Primary Key)는 시스템이 한 테이블에 있는 Row가 다른 Row와 구별되는 무언가를 가져야 하므로 이 역할을 수행할 수 있습니다.
기본키는 한 Row마다 유일해야 하며 NULL이 될 수 없어야 합니다. 변경 될 수 있는 경우가 없어야 한다.
위 조건을 만족하는 1개이상의 값을 primary_key로 설정할 수 있다.

기본키가 있어야 하는 이유
기본키가 없으면 일관성 없는 데이터가 반복적으로 쌓일 수 있기 때문에 쿼리 속도가 느리고, 
원하지 않는 정보 조회 결과를 가져올 수 있습니다. 관계형 데이터베이스에서는 반드시 각 행이 고유하게 식별되어야 합니다. 
이 규칙을 위반하면 더 이상 관계형이 아니며 데이터에서 모호함이 생길 수 있습니다. 
아마 다른 사용자가 테이블을 참조할 경우 끔찍한 일이 발생할 수도 있겠네요. 
이 부분은 중복 행을 생성하는 조인(JOIN) Query와 같은 부분애서 재앙과 같은 일입니다. 
그리고 대부분의 경우 Primary Key를 기반으로 테이블의 행을 검색하거나 결합합니다.



### Templates 상속 ###

기준이 되는 Templates를 하나 만들어 놓고, 그것을 상속 받아 html 코드 작성하면 중복 작성되는 부분 없앨 수 있다.

<변경 될 내용이 지정될 영역을 아래와 같이 block 과 그 이름 contents 라고 쓴다.
{% block contents %}
{% endblock %}
추후 사용 시에는 contents block에 추가하고 싶은 내용만 입력 하여 사용 할 수 있다.

<상속>
{% extends "base.html" %} / base.html을 상속 받고
{% block contents %} / contents 라는 block 안에 아래 내용을 채우겠다.
{% endblock %} / block의 끝을 지정


### Django form 사용 ###
forms.py를 생성하고 
from django import forms

클래스를 생성하고, forms에서 제공하는 기본 기능을 사용하여 html을 간단히 작성 할 수 있다.

forms.py <-> views.py <-> login django form.html
3개가 링크 되어 있다.

django 에서 제공하는 forms 모듈을 사용하므로써, views.py의 login 함수의 내용도 훨씬 간략 해지고,
login django form.html의 내용 역시 아래 반복 문 if 문 사용으로 간략하게 사용 할 수 있다.
{% for field in form %}
{% if field.errors %}
{% endif %}
{% endfor %}

forms.py 를 사용하는 목적은, login 시 POST 되는 username과 password 필드의 값들을 어떻게 처리 할 것인지
클래스를 생성하는 것.

